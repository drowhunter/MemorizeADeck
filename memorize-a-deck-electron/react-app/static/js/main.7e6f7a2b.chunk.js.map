{"version":3,"sources":["Modal.js","PlayingCardButton.js","Home/SuitSelectorModal.js","Card.js","Home/Home.js","connection.service.js","Memorization/memorization.service.js","KeyboardShortcutsModal.js","CardAssociations/card-associations.service.js","CardAssociations/CardWordLinksModal.js","Options.js","CardList.js","use-scroll-to-bottom-on-change.js","Memorization/MemorizationPage.js","Recall/recall.service.js","Recall/HintRequestConfirmationModal.js","Recall/MemorizationCompleteModal.js","Recall/RecallPage.js","highscore.service.js","Highscores/HighscoresPage.js","Instructions/InstructionsPage.js","EditCardWordLinks/EditCardWordLinksPage.js","App.js","serviceWorker.js","index.js"],"names":["Modal","isOpen","children","onClose","className","onClick","PlayingCardButton","playingCardName","restOfProps","style","backgroundImage","SuitSelectorModal","onSuitsSelected","useState","isSpadesSelected","setIsSpadesSelected","isDiamondsSelected","setIsDiamondsSelected","isClubsSelected","setIsClubsSelected","isHeartsSelected","setIsHeartsSelected","disabled","suitNames","faces","Card","suit","face","mini","src","alt","width","HomePage","randomCardSuitAndFace","setRandomCardSuitAndFace","useEffect","Math","floor","random","length","history","useHistory","isSuitSelectorOpen","setIsSuitsSelectorOpen","to","href","push","includeSpades","includeDiamonds","includeHearts","includeClubs","connection","window","EventEmitter","memorizationEvents","stopMemorization","send","on","currentCard","emit","cardAssociation","isCardAssociationVisible","cardsSeen","isCurrentCardVisible","isLastCard","cardsNotSeenCount","result","KeyboardShortcutsModal","props","getCardAssociations","CardWordLinksModal","cardAssociations","setCardAssociations","then","map","index","key","playingCard","association","Options","setIsOpen","handleRightClick","e","button","document","addEventListener","removeEventListener","Option","icon","title","CardList","cards","useScrollToBottomOnChange","stateProp","containerSelector","setTimeout","container","querySelector","scrollTop","scrollHeight","MemorizationPage","isInitialized","setIsInitialized","setCurrentCard","setCardAssociation","setIsLastCard","setIsCardAssociationVisible","setIsCurrentCardVisible","setCardsSeen","setCardsNotSeenCount","ellapsedTime","setEllapsedTime","isKeyboardShortcutsModalVisible","setIsKeyboardShortcutsModalVisible","isCardWordLinksModalOpen","setIsCardWordLinksModalOpen","location","useLocation","handleMemorizationComplete","cardsMemorized","memorizationTime","pathname","state","off","ellapsedTimeIntervalId","options","IncludeSpades","IncludeDiamonds","IncludeClubs","IncludeHearts","catch","error","console","log","Promise","reject","startMemorization","setInterval","clearInterval","handleTurnCard","useCallback","a","async","wasCardTurned","handleKeydown","toUpperCase","body","TurnedDeck","cardCount","marginLeft","_","Array","fill","position","top","round","right","recallEvents","diamond","heart","club","spade","ace","two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","selectFace","selectSuit","getRecallDuration","timespan","timespanRegex","timespanMatch","match","hours","Number","groups","minutes","seconds","milliseconds","alert","isClubSelected","isDiamondSelected","isHeartSelected","isSpadeSelected","isTwoSelected","isThreeSelected","isFourSelected","isFiveSelected","isSixSelected","isSevenSelected","isEightSelected","isNineSelected","isTenSelected","isJackSelected","isQueenSelected","isKingSelected","isAceSelected","cardsRemembered","hintConfirmationRequired","timeSpan","HintRequestConfirmationModal","onConfirmation","onCancel","MemorizationCompleteModal","wereHintsUsed","count","onOk","recallDuration","message","String","padStart","RecallPage","setIsClubSelected","setIsDiamondSelected","setIsHeartSelected","setIsSpadeSelected","setIsTwoSelected","setIsThreeSelected","setIsFourSelected","setIsFiveSelected","setIsSixSelected","setIsSevenSelected","setIsEightSelected","setIsNineSelected","setIsTenSelected","setIsJackSelected","setIsQueenSelected","setIsKingSelected","setIsAceSelected","setCardsRemembered","isHintConfirmationModalVisible","setIsHintConfirmationModalVisible","setWereHintsUsed","recallTimespan","setRecallTimespan","requestHint","handleHintConfirmationRequired","handleRecallComplete","start","handleKeyDown","toLowerCase","isHintRequestConfirmed","numberOfCards","HighscoresPage","highscores","setHighscores","sort","highscore1","highscore2","highscore","Highscore","isHighlighted","unitToString","unitValue","unitName","durationDescription","InstructionsPage","CardAndShortName","cardPath","shortName","EditCardWordLinksPage","i","type","value","onChange","newAssociation","indexOfPlayingCard","ca","indexOf","slice","updateAssociation","target","newAssociations","App","path","exact","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e6f7a2b.chunk.js","sourcesContent":["import React from 'react';\nimport './Modal.scss'\n\nexport function Modal({ isOpen, children, onClose, className }) {\n    return (\n        <>{isOpen && (<div className=\"modal-container\">\n            <div className={`modal ${className || ''}`}>\n                <div className=\"close-button\" onClick={onClose}>\n                    &times;\n                </div>\n                {children}\n            </div>\n        </div>)}\n        </>);\n}","import React from 'react';\nimport './PlayingCardButton.scss';\n\n\nexport function PlayingCardButton({playingCardName, className, ...restOfProps}) {\n    return <button {...restOfProps} className={`playing-card-button ${className}`}><div className=\"playing-card-image\" style={{ backgroundImage: `url(./PlayingCards/${playingCardName}.png)` }}></div></button>\n}","import React, { useState } from 'react';\nimport './SuitSelectorModal.scss';\nimport { Modal } from '../Modal';\nimport { PlayingCardButton } from '../PlayingCardButton';\n\nexport function SuitSelectorModal({ isOpen, onSuitsSelected, onClose }) {\n    const [isSpadesSelected, setIsSpadesSelected] = useState(true);\n    const [isDiamondsSelected, setIsDiamondsSelected] = useState(true);\n    const [isClubsSelected, setIsClubsSelected] = useState(true);\n    const [isHeartsSelected, setIsHeartsSelected] = useState(true);\n    return (\n        <div className=\"suit-selector-modal\">\n            <Modal isOpen={isOpen} onClose={onClose}>\n                <h2>Selected Suits</h2>\n                <div className=\"suits-container\">\n                    <PlayingCardButton onClick={() => setIsSpadesSelected(!isSpadesSelected)} className={`${isSpadesSelected ? 'selected' : ''}`} playingCardName=\"Spade\"/>\n                    <PlayingCardButton onClick={() => setIsDiamondsSelected(!isDiamondsSelected)} className={`${isDiamondsSelected ? 'selected' : ''}`} playingCardName=\"Diamond\"/>\n                    <PlayingCardButton onClick={() => setIsClubsSelected(!isClubsSelected)} className={`${isClubsSelected ? 'selected' : ''}`} playingCardName=\"Club\"/>\n                    <PlayingCardButton onClick={() => setIsHeartsSelected(!isHeartsSelected)} className={`${isHeartsSelected ? 'selected' : ''}`} playingCardName=\"Heart\"/>\n                </div>\n                <button disabled={!isSpadesSelected && !isDiamondsSelected && !isClubsSelected && !isHeartsSelected} onClick={() => {                    \n                    onSuitsSelected({\n                        isSpadesSelected,\n                        isDiamondsSelected,\n                        isClubsSelected,\n                        isHeartsSelected\n                    });\n                }}>Go</button>\n            </Modal>\n        </div>)\n}\n\n","import React from 'react';\n\n//This is defined as an enum in .net\nexport const suitNames = [\"Diamonds\", \"Hearts\", \"Clubs\", \"Spades\"]; //0 - Diamond, 1...\nexport const faces = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n\nexport function Card({suit, face, mini}){    \n    return <img src={`./PlayingCards/${suitNames[suit]}/${faces[face]}${suitNames[suit][0]}.png`} alt={`Playing card ${suitNames[suit]} ${faces[face]}`} width={mini ? '100px' : '150px'}/>\n}","import React, { useState, useEffect } from 'react';\nimport './Home.scss'\nimport { useHistory, Link } from 'react-router-dom'\nimport { SuitSelectorModal } from './SuitSelectorModal';\nimport { Card, suitNames, faces } from '../Card';\n\nexport function HomePage() {\n    const [randomCardSuitAndFace, setRandomCardSuitAndFace] = useState(null);\n    useEffect(() => {\n        setRandomCardSuitAndFace({\n            suit: Math.floor(Math.random() * suitNames.length),\n            face: Math.floor(Math.random() * faces.length)\n        })\n    }, []);\n\n\n    const history = useHistory();\n    function handleSuitsSelected({\n        isSpadesSelected,\n        isDiamondsSelected,\n        isClubsSelected,\n        isHeartsSelected\n    }) {\n        history.push('/memorization', {\n            includeSpades: isSpadesSelected,\n            includeDiamonds: isDiamondsSelected,\n            includeHearts: isHeartsSelected,\n            includeClubs: isClubsSelected\n        });\n    }\n\n    const [isSuitSelectorOpen, setIsSuitsSelectorOpen] = useState(false);\n\n    return (<>\n        <div className=\"home\">\n            <div onClick={() => setIsSuitsSelectorOpen(true)}>Start</div>\n            <Link to=\"/instructions\">Instructions</Link>\n            <Link to=\"/highscores\">Highscores</Link>\n            <Link to=\"/edit-card-word-links\">Edit Card Word Links</Link>\n            <a href=\"mailto:rui@blinkingcaret.com?subject=Feedback%20Memory%20Ace%20.NET%20Core%20-%20Electron-CGI%20Demo%20Project\">Feedback/Support/Feature Request</a>\n        </div>\n        {randomCardSuitAndFace && <div className=\"random-card-container\"><Card suit={randomCardSuitAndFace.suit} face={randomCardSuitAndFace.face} mini /></div>}\n        <SuitSelectorModal isOpen={isSuitSelectorOpen} onSuitsSelected={handleSuitsSelected} onClose={() => setIsSuitsSelectorOpen(false)} />\n    </>)\n}","/**\n * @typedef Connection \n * @property {(eventName: string, args?: any, handlerFn?: (err: any, result: any) => void | any) => void | Promise<any>} send\n * @property {(eventName: string, handlerFn?: (arg: any) => any) => void} on\n */\n\n/** @type {Connection} */\nexport const connection = window['connection'];\n\n/** @type {{on: (eventName: string, handler: Function) => void}} */\nexport const EventEmitter = window['EventEmitter'];","import {connection, EventEmitter} from '../connection.service';\n\nexport const memorizationEvents = new EventEmitter();\n\nexport function startMemorization({\n    includeSpades = false,\n    includeDiamonds = false,\n    includeClubs = false,\n    includeHearts = false\n}) {\n    return connection.send('memorization.start', {\n        IncludeSpades: includeSpades,\n        IncludeDiamonds: includeDiamonds,\n        IncludeClubs: includeClubs,\n        IncludeHearts: includeHearts\n    }).catch(error => {\n        console.log('There was an error starting the memorization process', error);\n        return Promise.reject(error);\n    });\n}\n\nexport function turnCard() {\n    return connection.send('memorization.turnCard').then(wasCardTurned => {\n        if (!wasCardTurned) {\n            console.log('Could not turn card...');\n        }\n        return wasCardTurned;\n    });\n}\n\nexport function toggleIsCardAssociationVisible() {\n    return connection.send('memorization.toggleIsCardAssociationVisible');\n}\n\nexport function stopMemorization() {\n    return connection.send('memorization.stop');\n}\n\nexport function getEllapsedTime() {\n    return connection.send('memorization.ellapsedTime');\n}\n\nconnection.on('memorization.currentCard', currentCard => {\n    memorizationEvents.emit('currentCardChanged', currentCard);\n});\n\nconnection.on('memorization.cardAssociation', cardAssociation => {\n    memorizationEvents.emit('cardAssociationChanged', cardAssociation);\n});\n\n\nconnection.on('memorization.isCardAssociationVisible', isCardAssociationVisible => {\n    memorizationEvents.emit('isCardAssociationVisible', isCardAssociationVisible);\n});\n\nconnection.on('memorization.cardsSeen', cardsSeen => {\n    memorizationEvents.emit('cardsSeen', cardsSeen);\n});\n\nconnection.on('memorization.isCurrentCardVisible', isCurrentCardVisible => {\n    memorizationEvents.emit('isCurrentCardVisible', isCurrentCardVisible);\n});\n\nconnection.on('memorization.isLastCard', isLastCard => {\n    memorizationEvents.emit('isLastCard', isLastCard);\n});\n\nconnection.on('memorization.cardsNotSeenCount', cardsNotSeenCount => {\n    memorizationEvents.emit('cardsNotSeenCount', cardsNotSeenCount);\n});\n\nconnection.on('memorization.complete', result => {\n    memorizationEvents.emit('complete', result);\n});","import React from 'react';\nimport { Modal } from './Modal';\nimport './KeyboardShortcutsModal.scss'\n\nexport function KeyboardShortcutsModal(props) {\n    return (<Modal {...props}>\n        <div className=\"keyboard-shortcuts\">\n            <h2>Keyboard Shortcuts</h2>\n            <div className=\"title\">\n                Memorization\n            </div>\n            <div className=\"keys\">\n                <strong>T, Enter</strong>\n                <span>- Turn Card</span>\n            </div>\n            <div className=\"keys\">\n                <strong>S</strong>\n                <span>- Stop</span>\n            </div>\n            <div className=\"title\">\n                Recall\n            </div>\n            <div className=\"keys\">\n                <strong>S</strong>\n                <span>- Spades</span>\n            </div>\n            <div className=\"keys\">\n                <strong>D</strong>\n                <span>- Diamonds</span>\n            </div>\n            <div className=\"keys\">\n                <strong>C</strong>\n                <span>- Clubs</span>\n            </div>\n            <div className=\"keys\">\n                <strong>H</strong>\n                <span>- Hearts</span>\n            </div>\n            <div className=\"keys\">\n                <strong>A, 1</strong>\n                <span>- Ace</span>\n            </div>\n            <div className=\"keys\">\n                <strong>2..9</strong>\n                <span>- Two..Nine</span>\n            </div>\n            <div className=\"keys\">\n                <strong>J</strong>\n                <span>- Jack</span>\n            </div>\n            <div className=\"keys\">\n                <strong>Q</strong>\n                <span>- Queen</span>\n            </div>\n            <div className=\"keys\">\n                <strong>K</strong>\n                <span>- King</span>\n            </div>\n        </div>\n    </Modal>)\n}","import { connection } from '../connection.service';\n\n\nexport function getCardAssociations() {\n    return connection.send('cardAssociations.getAll');\n}\n\nexport function saveCardAssociations(newAssociations) {\n    return connection.send('cardAssociations.save', newAssociations)\n}\n","import React, { useEffect, useState } from 'react';\nimport './CardWordLinksModal.scss'\nimport {getCardAssociations} from './card-associations.service';\nimport { Card } from '../Card';\nimport { Modal } from '../Modal';\n\nexport function CardWordLinksModal(props) {\n    const [cardAssociations, setCardAssociations] = useState([]);\n    useEffect(() => {\n        getCardAssociations().then(setCardAssociations);\n    }, []);\n    return (<Modal {...props}>\n        <div className=\"card-word-links\">\n            {cardAssociations.map((cardAssociation, index) => (<div key={index}>\n                <Card face={cardAssociation.playingCard.face} suit={cardAssociation.playingCard.suit} mini/>\n                <div>{cardAssociation.association}</div>\n            </div>))}\n        </div>\n    </Modal>)\n}\n\n","import React, {useState, useEffect} from 'react';\nimport './Options.scss'\n\n\nexport function Options({ children }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        const handleRightClick = e => {\n            if (e.button === 2 /*right click*/) {\n                setIsOpen(!isOpen);\n            }\n        }\n        document.addEventListener('mousedown', handleRightClick);\n        return () => {\n            document.removeEventListener('mousedown', handleRightClick);\n        }\n    }, [isOpen]);\n\n    return (\n        <>\n            <div className={`options ${isOpen ? 'open' : ''}`}>\n                {children}\n            </div>\n            <div className={`options-toggle ${isOpen ? 'open' : ''}`} onClick={() => setIsOpen(!isOpen)}>&#9650;</div>\n        </>\n    );\n}\n\nOptions.Option = function ({ icon, title, onClick }) {\n    return (<div onClick={onClick}>\n        <div>{icon}</div>\n        <div>{title}</div>\n    </div>)\n}\n","import React from 'react';\nimport './CardList.scss';\nimport { Card } from './Card';\n\nexport function CardList({ cards }) {\n    return (<div className=\"cards-list\">\n        {cards.map((playingCard, index) => <Card key={index} suit={playingCard.suit} face={playingCard.face} mini />)}\n    </div>)\n}\n","import { useEffect } from 'react';\n\nexport function useScrollToBottomOnChange(stateProp, containerSelector) {\n    useEffect(() => {\n        setTimeout(() => {\n            const container = document.querySelector(containerSelector);\n            if (!container) return;\n            container.scrollTop = container.scrollHeight;\n        })\n    }, [stateProp, containerSelector]);\n}","import React, { useEffect, useState, useCallback } from 'react'\nimport { startMemorization, memorizationEvents, turnCard, getEllapsedTime, toggleIsCardAssociationVisible, stopMemorization } from './memorization.service'\nimport { useLocation, useHistory } from 'react-router-dom';\nimport \"./MemorizationPage.scss\"\nimport { Card } from '../Card';\nimport { KeyboardShortcutsModal } from '../KeyboardShortcutsModal';\nimport { CardWordLinksModal } from '../CardAssociations/CardWordLinksModal';\nimport {Options} from '../Options'\nimport { CardList } from '../CardList';\nimport { useScrollToBottomOnChange } from '../use-scroll-to-bottom-on-change';\n\nexport function MemorizationPage() {\n    const [isInitialized, setIsInitialized] = useState(true);\n    const [currentCard, setCurrentCard] = useState();\n    const [cardAssociation, setCardAssociation] = useState();\n    const [isLastCard, setIsLastCard] = useState(false);\n    const [isCardAssociationVisible, setIsCardAssociationVisible] = useState(false);\n    const [isCurrentCardVisible, setIsCurrentCardVisible] = useState(false)\n    const [cardsSeen, setCardsSeen] = useState([]);\n    const [cardsNotSeenCount, setCardsNotSeenCount] = useState(0);\n    const [ellapsedTime, setEllapsedTime] = useState();\n\n    const [isKeyboardShortcutsModalVisible, setIsKeyboardShortcutsModalVisible] = useState(false);\n    const [isCardWordLinksModalOpen, setIsCardWordLinksModalOpen] = useState(false);\n\n    const location = useLocation();\n    const history = useHistory();\n\n    useEffect(() => {        \n        const handleMemorizationComplete = ({ cardsMemorized, memorizationTime }) => {\n            history.push({\n                pathname: '/recall',\n                state: {\n                    cardsMemorized,\n                    memorizationTime\n                }\n            });\n        };\n\n        memorizationEvents.on('cardAssociationChanged', setCardAssociation);\n        memorizationEvents.on('isLastCard', setIsLastCard);\n        memorizationEvents.on('currentCardChanged', setCurrentCard);\n        memorizationEvents.on('cardsSeen', setCardsSeen);\n        memorizationEvents.on('cardsNotSeenCount', setCardsNotSeenCount);\n        memorizationEvents.on('isCardAssociationVisible', setIsCardAssociationVisible);\n        memorizationEvents.on('isCurrentCardVisible', setIsCurrentCardVisible);\n        memorizationEvents.on('complete', handleMemorizationComplete);\n\n        return () => {\n            memorizationEvents.off('cardAssociationChanged', setCardAssociation);\n            memorizationEvents.off('isLastCard', setIsLastCard);\n            memorizationEvents.off('currentCardChanged', setCurrentCard);\n            memorizationEvents.off('cardsSeen', setCardsSeen);\n            memorizationEvents.off('cardsNotSeenCount', setCardsNotSeenCount);\n            memorizationEvents.off('isCardAssociationVisible', setIsCardAssociationVisible);\n            memorizationEvents.off('isCurrentCardVisible', setIsCurrentCardVisible);\n            memorizationEvents.off('complete', handleMemorizationComplete);    \n        }\n    }, [history]);\n\n    useEffect(() => {\n        let ellapsedTimeIntervalId = null\n        const options = location.state || {};\n        startMemorization({\n            includeSpades: options.includeSpades,\n            includeDiamonds: options.includeDiamonds,\n            includeHearts: options.includeHearts,\n            includeClubs: options.includeClubs,\n        }).then(() => {\n            setIsInitialized(true)\n            ellapsedTimeIntervalId = window.setInterval(() => {\n                getEllapsedTime().then(setEllapsedTime);\n            }, 1000);\n        });\n        return () => {\n            window.clearInterval(ellapsedTimeIntervalId);\n        }\n    }, [location.state]);\n\n    useScrollToBottomOnChange(cardsSeen, '.cards-seen-container');\n\n    const handleTurnCard = useCallback(async function handleTurnCard() {\n        if (!isInitialized) return;\n        await turnCard()\n    }, [isInitialized]);\n\n    useEffect(() => {                \n        const handleKeydown = async e => {\n            if (e.key === 't' || e.key === 'T' || e.key === 'Enter') {\n                await handleTurnCard();\n            }else if (e.key.toUpperCase() === 'S') {\n                await stopMemorization();\n            }\n        };\n        document.body.addEventListener('keydown', handleKeydown);\n        return () => {\n            document.body.removeEventListener(\"keydown\", handleKeydown);\n        }\n    }, [handleTurnCard])\n\n\n\n    return (\n        <div className=\"memorization-page\">\n            <div className=\"cards-seen-container\">\n                <CardList cards={cardsSeen} />\n            </div>\n            <div className=\"memorization-area\">\n                <div className=\"huge-button\" onClick={async () => await stopMemorization()}>Stop</div>\n                <div></div>\n                <div className=\"current-card-container\">\n                    {currentCard && <Card suit={currentCard.suit} face={currentCard.face} />}\n                </div>\n                <div className=\"card-association-container\">{isCardAssociationVisible && <h3>{cardAssociation}</h3>}</div>\n                {!isLastCard && <TurnedDeck cardCount={cardsNotSeenCount} onClick={handleTurnCard} />}\n                {isLastCard && <div className={`huge-button ${!isCurrentCardVisible ? 'disabled' : ''}`} style={{marginLeft: 'auto'}} onClick={handleTurnCard}>Finish</div>}\n            </div>\n            <div className=\"time-container\">\n                {ellapsedTime && <h3>{ellapsedTime}</h3>}\n            </div>\n            <Options>\n                <Options.Option onClick={_ => history.push('/')} icon=\"&#9664;\" title=\"Main Menu\" />\n                <Options.Option onClick={_ => setIsKeyboardShortcutsModalVisible(!isKeyboardShortcutsModalVisible)} icon=\"&#9000;\" title=\"Keyboard Shortcuts\" />\n                <Options.Option onClick={_ => setIsCardWordLinksModalOpen(!isCardWordLinksModalOpen)} icon=\"&#8703;\" title=\"Card Memory Association List\" />\n                <Options.Option onClick={async _ => await toggleIsCardAssociationVisible()} icon=\"&#128466;\" title=\"Show Card Association\" />\n            </Options>\n            <KeyboardShortcutsModal isOpen={isKeyboardShortcutsModalVisible} onClose={() => setIsKeyboardShortcutsModalVisible(false)} />\n            <CardWordLinksModal isOpen={isCardWordLinksModalOpen} onClose={() => setIsCardWordLinksModalOpen(false)} />\n        </div>\n    );\n}\n\nfunction TurnedDeck({ cardCount = 52, onClick }) {\n    return (<div className=\"turned-deck\" onClick={onClick}>\n        {Array(cardCount).fill(null).map((_, index) => <img key={index} src=\"./PlayingCards/BlueBack.png\" width=\"150px\" style={{ position: 'absolute', top: `-${Math.round(index / 2.0)}px`, right: `${Math.round((index + 1) / 2.0)}.px` }} alt=\"turned card\" />)}\n    </div>)\n}\n\n","import {connection, EventEmitter} from '../connection.service';\n\nexport const recallEvents = new EventEmitter();\n\nexport const suit = {\n    diamond: 0,\n    heart: 1,\n    club: 2,\n    spade: 3\n}\n\nexport const face = {\n    ace: 0,\n    two: 1,\n    three: 2,\n    four: 3,\n    five: 4,\n    six: 5,\n    seven: 6,\n    eight: 7,\n    nine: 8,\n    ten: 9,\n    jack: 10,\n    queen: 11,\n    king: 12    \n}\n\nexport function selectFace(face) {\n    return connection.send('recall.selectFace', face);\n}\n\nexport function selectSuit(suit) {\n    return connection.send('recall.selectSuit', suit);\n}\n\nexport function start({cardsMemorized, memorizationTime}) {\n    return connection.send('recall.start', {cardsMemorized, memorizationTime});\n}\n\nexport function hint() {\n    return connection.send('recall.hint');\n}\n\nexport function sendHintRequestConfirmation(isHintRequestConfirmed) {\n    return connection.send('recall.hintRequestConfirmation', isHintRequestConfirmed);\n}\n\n\nconnection.on('recall.isClubSelected', isClubSelected => recallEvents.emit('isClubSelected', isClubSelected));\nconnection.on('recall.isDiamondSelected', isDiamondSelected => recallEvents.emit('isDiamondSelected', isDiamondSelected));\nconnection.on('recall.isHeartSelected', isHeartSelected => recallEvents.emit('isHeartSelected', isHeartSelected));\nconnection.on('recall.isSpadeSelected', isSpadeSelected => recallEvents.emit('isSpadeSelected', isSpadeSelected));\nconnection.on('recall.isTwoSelected', isTwoSelected => recallEvents.emit('isTwoSelected', isTwoSelected));\nconnection.on('recall.isThreeSelected', isThreeSelected => recallEvents.emit('isThreeSelected', isThreeSelected));\nconnection.on('recall.isFourSelected', isFourSelected => recallEvents.emit('isFourSelected', isFourSelected));\nconnection.on('recall.isFiveSelected', isFiveSelected => recallEvents.emit('isFiveSelected', isFiveSelected));\nconnection.on('recall.isSixSelected', isSixSelected => recallEvents.emit('isSixSelected', isSixSelected));\nconnection.on('recall.isSevenSelected', isSevenSelected => recallEvents.emit('isSevenSelected', isSevenSelected));\nconnection.on('recall.isEightSelected', isEightSelected => recallEvents.emit('isEightSelected', isEightSelected));\nconnection.on('recall.isNineSelected', isNineSelected => recallEvents.emit('isNineSelected', isNineSelected));\nconnection.on('recall.isTenSelected', isTenSelected => recallEvents.emit('isTenSelected', isTenSelected));\nconnection.on('recall.isJackSelected', isJackSelected => recallEvents.emit('isJackSelected', isJackSelected));\nconnection.on('recall.isQueenSelected', isQueenSelected => recallEvents.emit('isQueenSelected', isQueenSelected));\nconnection.on('recall.isKingSelected', isKingSelected => recallEvents.emit('isKingSelected', isKingSelected));\nconnection.on('recall.isAceSelected', isAceSelected => recallEvents.emit('isAceSelected', isAceSelected));\n\nconnection.on('recall.cardsRemembered', cardsRemembered => recallEvents.emit('cardsRemembered', cardsRemembered));\n\nconnection.on('recall.hintConfirmationRequired', hintConfirmationRequired => recallEvents.emit('hintConfirmationRequired', hintConfirmationRequired));\n\nconnection.on('recall.completed', timeSpan => recallEvents.emit('completed', timeSpan));\n\n\nexport function getRecallDuration(timespan) {\n    const timespanRegex = /^(?<hours>\\d{2}):(?<minutes>\\d{2}):(?<seconds>\\d{2})\\.(?<milliseconds>\\d+)$/; //if you are looking and this and thinking: WTF? it's late and this was the first thing I coult think of when I realised that javascript doen't have a native way to represent durations in time\n    const timespanMatch = timespan.match(timespanRegex)\n    if (timespanMatch === null) {\n        alert('Could not parse timespan from dotnet: ' + timespan);\n        return;\n    }\n    return {\n        hours: Number(timespanMatch.groups.hours),\n        minutes: Number(timespanMatch.groups.minutes),\n        seconds: Number(timespanMatch.groups.seconds),\n        milliseconds: Number(timespanMatch.groups.milliseconds),        \n    };\n}","import React from 'react';\nimport { Modal } from '../Modal';\nimport './HintRequestConfirmationModal.scss';\n\nexport function HintRequestConfirmationModal({ isOpen, onConfirmation, onCancel}) {\n    return (<Modal isOpen={isOpen} className=\"hint-confirmation-modal\" onClose={onCancel}>\n            <h3>Are you sure?</h3>\n            <div>If you use hints your score will not be kept</div>\n            <div className=\"footer\">\n                <button className=\"positive\" onClick={onConfirmation}>OK</button>\n                <button onClick={onCancel}>Cancel</button>\n            </div>\n    </Modal>)\n}","import React from 'react';\nimport './MemorizationCompleteModal.scss';\nimport { Modal } from '../Modal';\nimport { getRecallDuration } from './recall.service';\n\n\nexport function MemorizationCompleteModal({ isOpen, wereHintsUsed, count, timespan, onOk}) {\n    if (!timespan) return null;\n\n    const recallDuration = getRecallDuration(timespan);\n\n    let message = `Congratulations, you've memorized ${count} cards in ${recallDuration.hours !== 0 ? `${String(recallDuration.hours).padStart(2, \"0\")}:` : ''}${String(recallDuration.minutes).padStart(2, \"0\")}:${String(recallDuration.seconds).padStart(2, \"0\")}.`\n    if (wereHintsUsed) {\n        message += \"\\nYou've used hints so your score will not be kept.\\nPractice makes perfection, maybe next time you won't need them.\";\n    }\n    return (<Modal isOpen={isOpen} className=\"memorization-complete-modal\" onClose={onOk}>\n            <h3>Completed</h3>\n            <div>{message}</div>\n            <div className=\"footer\">\n                <button className=\"positive\" onClick={onOk}>OK</button>                \n            </div>\n    </Modal>)\n}\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport './RecallPage.scss';\nimport { PlayingCardButton } from '../PlayingCardButton';\nimport { Options } from '../Options';\nimport { KeyboardShortcutsModal } from '../KeyboardShortcutsModal';\nimport { CardWordLinksModal } from '../CardAssociations/CardWordLinksModal';\nimport { suit, face, selectFace, selectSuit, recallEvents, start, hint, sendHintRequestConfirmation } from './recall.service';\nimport { CardList } from '../CardList';\nimport { HintRequestConfirmationModal } from './HintRequestConfirmationModal';\nimport { useScrollToBottomOnChange } from '../use-scroll-to-bottom-on-change';\nimport { saveHighscore } from '../highscore.service';\nimport { MemorizationCompleteModal } from './MemorizationCompleteModal';\n\nexport function RecallPage() {\n    const [isInitialized, setIsInitialized] = useState(false)\n    const [isKeyboardShortcutsModalVisible, setIsKeyboardShortcutsModalVisible] = useState(false);\n    const [isCardWordLinksModalOpen, setIsCardWordLinksModalOpen] = useState(false);\n    const [isClubSelected, setIsClubSelected] = useState(false);\n    const [isDiamondSelected, setIsDiamondSelected] = useState(false);\n    const [isHeartSelected, setIsHeartSelected] = useState(false);\n    const [isSpadeSelected, setIsSpadeSelected] = useState(false);\n    const [isTwoSelected, setIsTwoSelected] = useState(false);\n    const [isThreeSelected, setIsThreeSelected] = useState(false);\n    const [isFourSelected, setIsFourSelected] = useState(false);\n    const [isFiveSelected, setIsFiveSelected] = useState(false);\n    const [isSixSelected, setIsSixSelected] = useState(false);\n    const [isSevenSelected, setIsSevenSelected] = useState(false);\n    const [isEightSelected, setIsEightSelected] = useState(false);\n    const [isNineSelected, setIsNineSelected] = useState(false);\n    const [isTenSelected, setIsTenSelected] = useState(false);\n    const [isJackSelected, setIsJackSelected] = useState(false);\n    const [isQueenSelected, setIsQueenSelected] = useState(false);\n    const [isKingSelected, setIsKingSelected] = useState(false);\n    const [isAceSelected, setIsAceSelected] = useState(false);\n\n    const [cardsRemembered, setCardsRemembered] = useState([]);\n    const [isHintConfirmationModalVisible, setIsHintConfirmationModalVisible] = useState(false);\n    const [wereHintsUsed, setWereHintsUsed] = useState(false);\n    const [recallTimespan, setRecallTimespan] = useState(null);\n\n    const location = useLocation();\n\n    const history = useHistory();\n\n    useEffect(() => {\n        recallEvents.on('isClubSelected', setIsClubSelected);\n        recallEvents.on('isDiamondSelected', setIsDiamondSelected);\n        recallEvents.on('isHeartSelected', setIsHeartSelected);\n        recallEvents.on('isSpadeSelected', setIsSpadeSelected);\n        recallEvents.on('isTwoSelected', setIsTwoSelected);\n        recallEvents.on('isThreeSelected', setIsThreeSelected);\n        recallEvents.on('isFourSelected', setIsFourSelected);\n        recallEvents.on('isFiveSelected', setIsFiveSelected);\n        recallEvents.on('isSixSelected', setIsSixSelected);\n        recallEvents.on('isSevenSelected', setIsSevenSelected);\n        recallEvents.on('isEightSelected', setIsEightSelected);\n        recallEvents.on('isNineSelected', setIsNineSelected);\n        recallEvents.on('isTenSelected', setIsTenSelected);\n        recallEvents.on('isJackSelected', setIsJackSelected);\n        recallEvents.on('isQueenSelected', setIsQueenSelected);\n        recallEvents.on('isKingSelected', setIsKingSelected);\n        recallEvents.on('isAceSelected', setIsAceSelected);\n\n        recallEvents.on('cardsRemembered', setCardsRemembered);\n        const handleHintConfirmationRequired = () => setIsHintConfirmationModalVisible(true);\n        recallEvents.on('hintConfirmationRequired', handleHintConfirmationRequired);\n        return () => {\n            recallEvents.off('isClubSelected', setIsClubSelected);\n            recallEvents.off('isDiamondSelected', setIsDiamondSelected);\n            recallEvents.off('isHeartSelected', setIsHeartSelected);\n            recallEvents.off('isSpadeSelected', setIsSpadeSelected);\n            recallEvents.off('isTwoSelected', setIsTwoSelected);\n            recallEvents.off('isThreeSelected', setIsThreeSelected);\n            recallEvents.off('isFourSelected', setIsFourSelected);\n            recallEvents.off('isFiveSelected', setIsFiveSelected);\n            recallEvents.off('isSixSelected', setIsSixSelected);\n            recallEvents.off('isSevenSelected', setIsSevenSelected);\n            recallEvents.off('isEightSelected', setIsEightSelected);\n            recallEvents.off('isNineSelected', setIsNineSelected);\n            recallEvents.off('isTenSelected', setIsTenSelected);\n            recallEvents.off('isJackSelected', setIsJackSelected);\n            recallEvents.off('isQueenSelected', setIsQueenSelected);\n            recallEvents.off('isKingSelected', setIsKingSelected);\n            recallEvents.off('isAceSelected', setIsAceSelected);\n\n            recallEvents.off('cardsRemembered', setCardsRemembered);\n            recallEvents.off('hintConfirmationRequired', handleHintConfirmationRequired);\n        }\n    }, [])\n\n    useEffect(() => {\n        const handleRecallComplete = async timespan => {\n            setRecallTimespan(timespan);\n        };\n\n        recallEvents.on('completed', handleRecallComplete);\n        return () => {\n            recallEvents.off('completed', handleRecallComplete);\n        }\n    }, [cardsRemembered, wereHintsUsed])\n\n    useEffect(() => {\n        const { cardsMemorized, memorizationTime } = location.state || {\n            \"cardsMemorized\": [{ \"suit\": 1, \"face\": 5 }, { \"suit\": 1, \"face\": 9 }, { \"suit\": 1, \"face\": 8 }, { \"suit\": 1, \"face\": 4 }, { \"suit\": 1, \"face\": 1 }, { \"suit\": 1, \"face\": 2 }, { \"suit\": 1, \"face\": 11 }, { \"suit\": 1, \"face\": 6 }, { \"suit\": 1, \"face\": 0 }, { \"suit\": 1, \"face\": 12 }, { \"suit\": 1, \"face\": 7 }, { \"suit\": 1, \"face\": 3 }, { \"suit\": 1, \"face\": 10 }],\n            \"memorizationTime\": \"00:00:06.3177712\"\n        };\n        start({ cardsMemorized, memorizationTime }).then(_ => {\n            setIsInitialized(true);\n        });\n    }, [location]);\n\n    useScrollToBottomOnChange(cardsRemembered, '.cards-recalled-container');\n\n\n    async function requestHint() {\n        if (!isInitialized) return;\n        await hint();\n    }\n\n    useEffect(() => {\n        const handleKeyDown = async e => {\n            switch (e.key.toLowerCase()) {\n                case 's':                    \n                    await selectSuit(suit.spade);\n                    break;\n                case 'd':\n                    await selectSuit(suit.diamond);\n                    break;\n                case 'c':\n                    await selectSuit(suit.club);\n                    break;\n                case 'h':\n                    await selectSuit(suit.heart);\n                    break;\n                case '1':\n                case 'a':\n                    await selectFace(face.ace);\n                    break;\n                case '2':\n                    await selectFace(face.two);\n                    break;\n                case '3':\n                    await selectFace(face.three);\n                    break;\n                case '4':\n                    await selectFace(face.four);\n                    break;\n                case '5':\n                    await selectFace(face.five);\n                    break;\n                case '6':\n                    await selectFace(face.six);\n                    break;\n                case '7':\n                    await selectFace(face.seven);\n                    break;\n                case '8':\n                    await selectFace(face.eight);\n                    break;\n                case '9':\n                    await selectFace(face.nine);\n                    break;\n                case '0':\n                    await selectFace(face.ten);\n                    break;\n                case 'j':\n                    await selectFace(face.jack);\n                    break;\n                case 'q':\n                    await selectFace(face.queen);\n                    break;\n                case 'k':\n                    await selectFace(face.king);\n                    break;\n                default:\n                    break;\n            }\n        }\n        document.body.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.body.removeEventListener('keydown', handleKeyDown);\n        }\n    }, [])\n\n    if (!isInitialized) return null;\n\n    return (\n        <div className=\"recall-page\">\n            <div className=\"cards-recalled-container\">\n                <CardList cards={cardsRemembered} />\n            </div>\n            <div className=\"controls\">\n                <div className=\"suits-container\">\n                    <div>\n                        <PlayingCardButton className={`${isClubSelected ? 'selected' : ''}`} playingCardName=\"Club\" onClick={async () => await selectSuit(suit.club)} />\n                        <PlayingCardButton className={`${isDiamondSelected ? 'selected' : ''}`} playingCardName=\"Diamond\" onClick={async () => await selectSuit(suit.diamond)} />\n                        <PlayingCardButton className={`${isHeartSelected ? 'selected' : ''}`} playingCardName=\"Heart\" onClick={async () => await selectSuit(suit.heart)} />\n                        <PlayingCardButton className={`${isSpadeSelected ? 'selected' : ''}`} playingCardName=\"Spade\" onClick={async () => await selectSuit(suit.spade)} />\n                    </div>\n                </div>\n                <div className=\"faces-container\">\n                    <div>\n                        <div>\n                            <PlayingCardButton className={`${isTwoSelected ? 'selected' : ''}`} playingCardName=\"2\" onClick={async () => await selectFace(face.two)} />\n                            <PlayingCardButton className={`${isThreeSelected ? 'selected' : ''}`} playingCardName=\"3\" onClick={async () => await selectFace(face.three)} />\n                            <PlayingCardButton className={`${isFourSelected ? 'selected' : ''}`} playingCardName=\"4\" onClick={async () => await selectFace(face.four)} />\n                            <PlayingCardButton className={`${isFiveSelected ? 'selected' : ''}`} playingCardName=\"5\" onClick={async () => await selectFace(face.five)} />\n                        </div>\n                        <div>\n                            <PlayingCardButton className={`${isSixSelected ? 'selected' : ''}`} playingCardName=\"6\" onClick={async () => await selectFace(face.six)} />\n                            <PlayingCardButton className={`${isSevenSelected ? 'selected' : ''}`} playingCardName=\"7\" onClick={async () => await selectFace(face.seven)} />\n                            <PlayingCardButton className={`${isEightSelected ? 'selected' : ''}`} playingCardName=\"8\" onClick={async () => await selectFace(face.eight)} />\n                            <PlayingCardButton className={`${isNineSelected ? 'selected' : ''}`} playingCardName=\"9\" onClick={async () => await selectFace(face.nine)} />\n                        </div>\n                        <div>\n                            <PlayingCardButton className={`${isTenSelected ? 'selected' : ''}`} playingCardName=\"10\" onClick={async () => await selectFace(face.ten)} />\n                            <PlayingCardButton className={`${isJackSelected ? 'selected' : ''}`} playingCardName=\"J\" onClick={async () => await selectFace(face.jack)} />\n                            <PlayingCardButton className={`${isQueenSelected ? 'selected' : ''}`} playingCardName=\"Q\" onClick={async () => await selectFace(face.queen)} />\n                        </div>\n                        <div>\n                            <PlayingCardButton className={`${isKingSelected ? 'selected' : ''}`} playingCardName=\"K\" onClick={async () => await selectFace(face.king)} />\n                            <PlayingCardButton className={`${isAceSelected ? 'selected' : ''}`} playingCardName=\"A\" onClick={async () => await selectFace(face.ace)} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"hint-button\" onClick={async () => await requestHint()}>\n                HINT\n            </div>\n            <Options>\n                <Options.Option onClick={_ => history.push('/')} icon=\"&#9664;\" title=\"Main Menu\" />\n                <Options.Option onClick={_ => setIsKeyboardShortcutsModalVisible(!isKeyboardShortcutsModalVisible)} icon=\"&#9000;\" title=\"Keyboard Shortcuts\" />\n                <Options.Option onClick={_ => setIsCardWordLinksModalOpen(!isCardWordLinksModalOpen)} icon=\"&#8703;\" title=\"Card Memory Association List\" />\n            </Options>\n            <KeyboardShortcutsModal isOpen={isKeyboardShortcutsModalVisible} onClose={() => setIsKeyboardShortcutsModalVisible(false)} />\n            <CardWordLinksModal isOpen={isCardWordLinksModalOpen} onClose={() => setIsCardWordLinksModalOpen(false)} />\n            <HintRequestConfirmationModal isOpen={isHintConfirmationModalVisible}\n                onConfirmation={async () => {\n                    setWereHintsUsed(true);\n                    await sendHintRequestConfirmation(true);\n                    await requestHint();\n                    setIsHintConfirmationModalVisible(false)\n                }}\n                onCancel={() => setIsHintConfirmationModalVisible(false)} />\n            <MemorizationCompleteModal isOpen={recallTimespan !== null} wereHintsUsed={wereHintsUsed} timespan={recallTimespan} count={cardsRemembered.length} onOk={async () => {\n                if (!wereHintsUsed) {\n                    try {\n                        await saveHighscore(cardsRemembered.length, recallTimespan);\n                        history.push({pathname: '/highscores', state: {count: cardsRemembered.length, timespan: recallTimespan}});\n                    } catch (error) {\n                        alert(error);\n                    }\n                } else {\n                    history.push('/highscores');\n                }\n            }} />\n        </div>\n    );\n}","import {connection} from './connection.service';\n\n\nexport function saveHighscore(numberOfCards, memorizationTime) {\n    return connection.send('highscores.save', {numberOfCards, memorizationTime});\n};\n\nexport function getHighscores() {\n    return connection.send('highscores.getAll');\n}","import React, { useState, useEffect } from 'react'\nimport { getHighscores } from '../highscore.service';\nimport './HighscoresPage.scss'\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { getRecallDuration } from '../Recall/recall.service';\n\nexport function HighscoresPage() {\n    const [highscores, setHighscores] = useState([])\n\n    useEffect(() => {\n        getHighscores().then(setHighscores);\n    }, [])\n\n    const location = useLocation();\n    const history = useHistory()\n    const { count, timespan } = location.state || {};\n\n    return (\n        <div className=\"highscores-page\">\n            <div className=\"highscores-container\">\n                {highscores.sort((highscore1, highscore2) => highscore1.numberOfCards === highscore2.numberOfCards ? (highscore1.memorizationTime < highscore2.memorizationTime ? -1 : 1) : highscore1.numberOfCards > highscore2.numberOfCards ? -1 : 1).map((highscore, index) => (\n                    <div key={index}>\n                        <Highscore index={index}\n                            memorizationTime={highscore.memorizationTime}\n                            numberOfCards={highscore.numberOfCards}\n                            isHighlighted={count === highscore.numberOfCards && timespan === highscore.memorizationTime}\n                        />\n                    </div>\n                ))}\n            </div>\n            <div className=\"bottom-button\" onClick={() => history.push('/')}>Main Menu</div>\n        </div>\n    );\n}\n\nfunction unitToString(unitValue, unitName) {\n    return `${unitValue} ${unitName}${unitValue > 1 ? 's' : ''}`\n}\n\nfunction Highscore({ index, numberOfCards, memorizationTime, isHighlighted }) {\n    const recallDuration = getRecallDuration(memorizationTime);\n    const durationDescription = `${recallDuration.hours !== 0 ? unitToString(recallDuration.hours, 'hour') + ' and ' : ''}${recallDuration.minutes !== 0 ? unitToString(recallDuration.minutes, 'minute') + ' and ' : ''}${unitToString(recallDuration.seconds, 'second')}`\n\n    return (\n        <div className={`highscore ${isHighlighted ? 'highlighted' : ''}`}>\n            <div>\n                <span>{index + 1}.</span> <span>{unitToString(numberOfCards, 'card')}</span>\n            </div>\n            <div>\n                in {durationDescription}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './InstructionsPage.scss'\nimport { useHistory } from 'react-router-dom';\n\nexport function InstructionsPage() {\n    const history = useHistory();\n    return <div className=\"instructions-page\">\n        <h1>Instructions</h1>\n        <div className=\"instructions\">\n            <p>This game will teach you how to memorize a full deck of cards. The goal is to do it in the least amount of time.</p>\n            <p>If you just randomly try to memorize a set of cards, chances are that you won't be able to remember more than ten.</p>\n            <p>There are memory techniques that make this task much easier, one of the most popular involves the use of <em>peg words</em>. If each card has a word associated with it (the peg word), when you want to remember a sequence of cards, instead of the cards themselves you can remember the words. Because these words have meaning to you it is easy to create links in your memory between them, and that makes remembering the sequence immensely easier than just remembering the cards.</p>\n            <p>Let's look at an example:</p>\n            <div className=\"card-and-name-list\">\n                <CardAndShortName cardPath=\"Clubs/2C\" shortName=\"2C\" />\n                <CardAndShortName cardPath=\"Hearts/AH\" shortName=\"HA\" />\n                <CardAndShortName cardPath=\"Clubs/10C\" shortName=\"C10\" />\n                <CardAndShortName cardPath=\"Clubs/6C\" shortName=\"C6\" />\n            </div>\n            <p>If C2 &#x2194; <em>Can</em>, HA &#x2194; <em>Hat</em>, C10 &#x2194; <em>Case</em> and C6 &#x2194; <em>Cash</em> you could imagine the following story in your mind:\n            </p>\n            <p>\n                \"You find a can (C2), with a hat inside (HA). You look into that hat and find a small case inside (C10). You open it and it's full of cash (C6)\".\n            </p>\n            <p>\n                This is easier to remember, and it also opens other possibilities in terms of recall that are almost impossible to achieve if you just try to memorize the cards.\n            </p>\n            <p>\n                For example, if I ask you what was inside the hat?\n            </p>\n            <p>\n                A case.\n            </p>\n            <p>\n                You've just answered what card was after the 10 of Clubs without breaking a sweat.\n            </p>\n            <p>\n                Where was the hat?\n            </p>\n            <p>\n                Inside a can.\n            </p>\n            <p>\n                You just answered which card was before the 10 of Clubs.\n            </p>\n            <p>\n                The difficulty of this technique is to remember what word is related to which card. In order to help you train I've added the option to show the word next to the card while you are memorizing it. And there is also an option to bring up the full list of card-word associations (you can bring up the full card-word associations from this screen if you wish, try it, just right-click or swipe from the bottom).\n            </p>\n            <p>\n                From the start screen you can also select an option to edit which word is associated with each card, so if the words that come as default don't mean anything to you, don't hesitate to change them. For example, some people prefer to associate people they know to each card.\n            </p>\n        </div>\n        <div className=\"bottom-button\" onClick={() => history.push('/')}>Main Menu</div>\n    </div>\n}\n\nfunction CardAndShortName({ cardPath, shortName }) {\n    return <div>\n        <div><img src={`./PlayingCards/${cardPath}.png`} alt={cardPath} width=\"70px\" /></div>\n        <div>{shortName}</div>\n    </div>\n}\n","import React, { useState, useEffect } from 'react';\nimport './EditCardWordLinksPage.scss';\nimport { getCardAssociations, saveCardAssociations } from '../CardAssociations/card-associations.service';\nimport { Card } from '../Card';\nimport { useHistory } from 'react-router-dom';\n\nexport function EditCardWordLinksPage() {\n    const [cardAssociations, setCardAssociations] = useState([])\n    useEffect(() => {\n        getCardAssociations().then(setCardAssociations);\n    }, []);\n    const history = useHistory();\n\n    function updateAssociation(playingCard, newAssociation) {        \n        const indexOfPlayingCard = cardAssociations.map(ca => ca.playingCard).indexOf(playingCard);\n        setCardAssociations([...cardAssociations.slice(0, indexOfPlayingCard), { playingCard, association: newAssociation }, ...cardAssociations.slice(indexOfPlayingCard + 1)]);\n    }\n\n    async function handleSave() {\n        try {\n            await saveCardAssociations(cardAssociations);\n            history.push('/');\n        } catch (error) {\n            alert(`Failed to save associations: ${error}`);\n        }\n\n    }\n\n    return (\n        <div className=\"edit-card-word-links\">\n            <h1>Edit Card-Word Links</h1>\n            <div className=\"card-associations-container\">\n                {cardAssociations.map((cardAssociation, i) => (\n                    <div className=\"card-association\" key={i}>\n                        <div><Card suit={cardAssociation.playingCard.suit} face={cardAssociation.playingCard.face} mini /></div>\n                        <div><input type=\"text\" value={cardAssociation.association} onChange={e => updateAssociation(cardAssociation.playingCard, e.target.value)} /></div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"actions-container\">\n                <div className=\"button\" onClick={() => history.push('/')}>\n                    Cancel\n                </div>\n                <div className=\"button\" onClick={handleSave}>\n                    Save\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.scss';\nimport { Route, MemoryRouter } from 'react-router-dom';\nimport { HomePage } from './Home/Home';\nimport { MemorizationPage } from './Memorization/MemorizationPage';\nimport { RecallPage } from './Recall/RecallPage';\nimport {HighscoresPage} from './Highscores/HighscoresPage'\nimport { InstructionsPage } from './Instructions/InstructionsPage';\nimport { EditCardWordLinksPage } from './EditCardWordLinks/EditCardWordLinksPage';\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n      <MemoryRouter>\n        <Route path=\"/\" exact component={HomePage}/>\n        <Route path=\"/instructions\" component={InstructionsPage}/>\n        <Route path=\"/memorization\" component={MemorizationPage}/>\n        <Route path=\"/recall\" component={RecallPage}/>\n        <Route path=\"/highscores\" component={HighscoresPage}/>\n        <Route path=\"/edit-card-word-links\" component={EditCardWordLinksPage}/>\n      </MemoryRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}